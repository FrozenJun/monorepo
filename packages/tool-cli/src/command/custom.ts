import { main } from '../utils/schematics-cli'
import { createConsoleLogger } from '@angular-devkit/core/node'
import { CliConfigItem, GenerateItem } from '../config.dto'
import { LoadConfig } from '../utils/load-config'
import { defaultsDeep } from 'lodash'
import { DEFAULT_VIEW_CONFIG } from '../config'

const CONFIG = LoadConfig()

interface DirCliItem extends GenerateItem {
  parentPath?: string
  child?: (DirCliItem | string)[]
}

export async function generateCustom(originalConfig: CliConfigItem) {
  const config = defaultsDeep(originalConfig, DEFAULT_VIEW_CONFIG)
  const dirs = config.generate
  const logger = createConsoleLogger(false)

  if (!dirs || !dirs.length) return
  for (let i = 0; i < dirs.length; i++) {
    try {
      if (typeof dirs[i] === 'string') {
        dirs[i] = { name: dirs[i] }
      }
      dirs[i].templatePath = dirs[i].templatePath || config.templatePath
      dirs[i].handlerPath = dirs[i].handlerPath || config.handlerPath
      await callSchematics(dirs[i], config)
    } catch (e) {
      logger.warn(e.message)
    }
  }
}

async function callSchematics(
  dir: DirCliItem | string,
  config: CliConfigItem,
  parentDir?: DirCliItem
) {
  if (typeof dir === 'string') {
    dir = { name: dir }
  }
  const { name, parentPath = '', templatePath } = dir

  let args: string[] = []
  args = ['tool-cli:custom', `--name=${name}`]
  parentPath && args.push(`--modulePath=${parentPath}`)
  templatePath && args.push(`--templatePath=${templatePath}`)
  await main({
    args,
    isAutoGenerated: true,
    itemConfig: config,
  })

  if (dir.child) {
    for (let i = 0; i < dir.child.length; i++) {
      let child = dir.child[i]
      if (typeof child === 'string') child = { name: child }
      if (parentDir) {
        child.parentPath = `${parentPath}/${name}`
      } else {
        child.parentPath = name
      }
      await callSchematics(child, config, dir)
    }
  }
}
